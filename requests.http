### =============================================================================
### üè≠ REAL SERVER
### Server: http://localhost:3000 (Real Server with PostgreSQL)
### =============================================================================

### =============================================================================
### üè• HEALTH & SYSTEM
### =============================================================================

### Health Check - Real
GET http://localhost:3000/health

### =============================================================================
### üîê AUTHENTICATION
### =============================================================================

### Test 2: Register User
POST http://localhost:3000/api/v1/auth/register
Content-Type: application/json

{
  "email": "test@example.com",
  "username": "testuser",
  "password": "SecurePassword123!",
  "firstname": "Test",
  "lastname": "User"
}

### Test 3: Login User
POST http://localhost:3000/api/v1/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "SecurePassword123!"
}

### =============================================================================
### üîí PROTECTED ROUTES
### =============================================================================

### Test 4: Protected Main Route
GET http://localhost:3000/api/v1/protected
Authorization: mock_access_token_12345

### Test 5: Protected Profile
GET http://localhost:3000/api/v1/protected/profile
Authorization: mock_access_token_12345

### Test 6: Protected Settings Update
PUT http://localhost:3000/api/v1/protected/settings
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "theme": "dark",
  "notifications": true,
  "language": "fr"
}

### Test 7: Protected Orders
GET http://localhost:3000/api/v1/protected/orders
Authorization: mock_access_token_12345

### Test 8: Logout
POST http://localhost:3000/api/v1/protected/logout
Authorization: mock_access_token_12345

### =============================================================================
### üë• USER MANAGEMENT - COLLECTION OPERATIONS
### =============================================================================

### Test 9: List All Users
GET http://localhost:3000/api/v1/users
Authorization: mock_access_token_12345

### Test 10: User Statistics (Admin)
GET http://localhost:3000/api/v1/users/stats
Authorization: mock_access_token_12345

### Test 11: Find User by Email (Admin)
GET http://localhost:3000/api/v1/users/by-email?email=test@example.com
Authorization: mock_access_token_12345

### Test 12: Find User by Username (Admin)
GET http://localhost:3000/api/v1/users/by-username?username=testuser
Authorization: mock_access_token_12345

### =============================================================================
### üë§ USER MANAGEMENT - INDIVIDUAL OPERATIONS
### =============================================================================

### Test 13: Get User by ID
GET http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000
Authorization: mock_access_token_12345

### Test 14: Update User Profile
PUT http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000/profile
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "firstname": "UpdatedName",
  "lastname": "UpdatedLastName",
  "username": "newusername",
  "bio": "Updated user biography"
}

### Test 15: ‚≠ê Change Password (THE MAIN ONE!)
PUT http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000/password
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "current_password": "MotDePasse123!",
  "new_password": "NouveauMot123!"
}

### Test 16: Update User Status (Admin)
PUT http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000/status
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "status": "suspended",
  "reason": "Policy violation"
}

### Test 17: Get User Roles
GET http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000/roles
Authorization: mock_access_token_12345

### Test 18: Assign Role (Admin)
POST http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000/roles
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "role": "admin"
}

### =============================================================================
### üß™ ERROR TESTING
### =============================================================================

### Test 19: Invalid UUID Format
GET http://localhost:3000/api/v1/users/invalid-uuid-format
Authorization: mock_access_token_12345

### Test 20: Missing Email Parameter
GET http://localhost:3000/api/v1/users/by-email
Authorization: mock_access_token_12345

### Test 21: Missing Username Parameter
GET http://localhost:3000/api/v1/users/by-username
Authorization: mock_access_token_12345

### Test 22: Invalid Password Change (Too Short)
PUT http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000/password
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "current_password": "old",
  "new_password": "123"
}

### Test 23: Missing Password Fields
PUT http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000/password
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "new_password": "NouveauMot123!"
}

### Test 24: No Authorization Header
GET http://localhost:3000/api/v1/protected

### Test 25: Invalid JSON Format
POST http://localhost:3000/api/v1/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "invalid-json"
}

### =============================================================================
### üéØ QUICK TESTS - ESSENTIALS
### =============================================================================

### Login
POST http://localhost:3000/api/v1/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "SecurePassword123!"
}

### Protected Route
GET http://localhost:3000/api/v1/protected
Authorization: mock_access_token_12345

### Change Password (MAIN TARGET)
PUT http://localhost:3000/api/v1/users/mock-user-123/password
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "current_password": "MotDePasse123!",
  "new_password": "NouveauMot123!"
}

### =============================================================================
### üí° ALTERNATIVE USER IDs FOR TESTING
### =============================================================================

### Test with Alternative User ID 1
GET http://localhost:3000/api/v1/users/mock-user-123
Authorization: mock_access_token_12345

### Test with Alternative User ID 2
PUT http://localhost:3000/api/v1/users/test-user-456/password
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "current_password": "MotDePasse123!",
  "new_password": "NouveauMot123!"
}

### Test with Alternative User ID 3
PUT http://localhost:3000/api/v1/users/user123/password
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "current_password": "MotDePasse123!",
  "new_password": "NouveauMot123!"
}

### =============================================================================
### üî• STRESS TESTING
### =============================================================================

### Stress Test: Large Payload
PUT http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000/profile
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "firstname": "VeryLongFirstNameThatExceedsNormalLimits",
  "lastname": "VeryLongLastNameThatExceedsNormalLimits",
  "username": "verylongusernamethatexceedsnormallimits",
  "bio": "This is a long biography that contains a lot of text to test how the system handles large payloads and whether it can process them correctly without any issues or performance degradation",
  "metadata": {
    "preferences": {
      "theme": "dark",
      "language": "fr",
      "notifications": {
        "email": true,
        "push": false,
        "sms": true
      }
    }
  }
}

### =============================================================================
### üìù NOTES
### =============================================================================
# Server URL: http://localhost:3000
# Default Authorization: mock_access_token_12345
# Main Test: Change Password (Test 15 & Quick Test 4)
#
# To run all tests:
# 1. Start server: cargo run
# 2. Run tests in order: Health -> Auth -> Protected -> Users
# 3. Focus on Test 15 for password change functionality
#
# Expected responses should be JSON with appropriate status codes
### =============================================================================
### üóÑÔ∏è DATABASE CONNECTION TESTING
### =============================================================================

### Test Real Database Health (from your health.rs)
GET http://localhost:3000/health/detailed
Authorization: mock_access_token_12345

### Test Database Readiness
GET http://localhost:3000/health/ready
Authorization: mock_access_token_12345

### Test Simple Health
GET http://localhost:3000/health

### Test Detailed Health (NEW!)
GET http://localhost:3000/health/detailed

### Test Readiness
GET http://localhost:3000/health/ready

### Test Liveness
GET http://localhost:3000/health/live


### =============================================================================
### üß™ REAL DATABASE OPERATIONS (IF CONNECTED)
### =============================================================================

### Test Real DB 1: Create Real User (would fail with mock)
POST http://localhost:3000/api/v1/users/real
Authorization: mock_access_token_12345
Content-Type: application/json

{
  "email": "realuser@example.com",
  "username": "realuser",
  "password": "RealPassword123!",
  "firstname": "Real",
  "lastname": "User"
}

### Test Real DB 2: Query Database Directly
GET http://localhost:3000/api/v1/debug/db-test
Authorization: mock_access_token_12345

### Test Real DB 3: Check Database Tables
GET http://localhost:3000/api/v1/debug/db-tables
Authorization: mock_access_token_12345

### =============================================================================
### üìä MOCK VS REAL COMPARISON
### =============================================================================

### Mock Response (Current)
GET http://localhost:3000/api/v1/users/550e8400-e29b-41d4-a716-446655440000
Authorization: mock_access_token_12345

### Real DB Response (Would be different)
GET http://localhost:3000/api/v1/users/real/550e8400-e29b-41d4-a716-446655440000
Authorization: mock_access_token_12345

### =============================================================================
### üè≠ REAL SERVER - READY
### =============================================================================

### TODO: Register User - Real (when auth module ready)
POST http://localhost:3000/api/v1/auth/register
Content-Type: application/json

{
  "email": "real@example.com",
  "username": "realuser",
  "password": "RealPassword123!"
}

### TODO: Login User - Real (when auth module ready)
POST http://localhost:3000/api/v1/auth/login
Content-Type: application/json

{
  "email": "real@example.com",
  "password": "RealPassword123!"
}

### TODO: Change Password - Real (when user module ready)
PUT http://localhost:3000/api/v1/users/{id}/password
Authorization: Bearer real_token_here
Content-Type: application/json

{
  "current_password": "RealPassword123!",
  "new_password": "NewRealPassword123!"
}
